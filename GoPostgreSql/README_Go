# Electronic Kanban Backend (Go)

This repository contains the backend API for an electronic Kanban application, built using Go, Gin, and GORM.

## Features

-   **RESTful API:** Provides endpoints to manage clients, suppliers, products, and Kanban cards.
-   **Database Interaction:** Uses GORM to interact with a PostgreSQL database.
-   **Soft Deletes:** Implements a soft delete approach for Kanban records using an `IsActive` flag.
-   **Kanban History:** Tracks the changes of each kanban with a dedicated history record.
-   **CORS:** Configured for cross-origin requests to enable frontend integration.
- **Go Modules:** Uses Go modules for dependency management.

## Technologies Used

-   **Go:** Programming language for backend development.
-   **Gin:** Web framework for building the API.
-   **GORM:** Object-relational mapper for database interactions.
-   **PostgreSQL:** Database for storing application data.
-   **godotenv:** Loads environment variables from a `.env` file.

## Setup

### Prerequisites

-   [Go](https://go.dev/dl/) (version 1.20 or higher)
-   [PostgreSQL](https://www.postgresql.org/)
-   A `.env` file in the `backend/` directory with your database connection details (see `.env.example`).

### Installation

1.  **Clone the repository:**

    ```bash
    git clone <repository-url>
    cd <project-folder>/backend
    ```

2.  **Create a `.env` file:**
    * Create a `.env` file in the `backend/` directory, and add the following variables:
    ```
        PORT=5000
        DB_HOST=<YOUR_DB_HOST>
        DB_USER=<YOUR_DB_USER>
        DB_PASSWORD=<YOUR_DB_PASSWORD>
        DB_NAME=<YOUR_DB_NAME>
        DB_PORT=<YOUR_DB_PORT>
    ```
        Replace the placeholders with your actual database credentials.

3.  **Initialize Go Modules:**
    ```bash
    go mod init kanban
    go mod tidy
    ```

4.  **Build the application:**
    ```bash
    go build -o myapp
    ```

### Running the Application
   ```bash
   ./myapp

   The server should now be running on http://localhost:5000.

API Endpoints

GET /api/clienti: Get all clients.

POST /api/clienti: Create a new client.

PUT /api/clienti/:id: Modifies an existing client.

GET /api/fornitori: Get all suppliers.

POST /api/fornitori: Create a new supplier.

PUT /api/fornitori/:id: Modifies an existing supplier.

GET /api/prodotti: Get all products.

POST /api/prodotti: Create a new product.

GET /api/kanban: Get all active Kanban cards.

POST /api/kanban: Create new Kanban cards.

PUT /api/kanban/:id: Modifies an existing kanban.

DELETE /api/kanban/:id: Soft delete a Kanban card.

PUT /api/kanban/:id/stato: Update the state of a Kanban card.

GET /api/kanban/history: Get the history of Kanban card state changes.

GET /api/dashboard/clienti/:id: Get Kanban cards for a specific client.

GET /api/dashboard/fornitori/:id: Get Kanban cards for a specific supplier.

Debugging
"not in std" error:

Ensure that you've run go mod init kanban in the project's root directory.

Verify that the import paths are kanban/<package>, like kanban/db, kanban/routes, kanban/models.

Verify that your files are in the correct directory structure.

undefined: db.Type error:

Ensure that the struct names in the models/models.go are capitalized (e.g., Cliente not cliente) to make them exported.

Make sure you are using the correct types (e.g. models.Cliente)

Permissions issues:

Ensure that GOPATH is set correctly.

If you have problems with permissions to /usr/local/go/, please use go mod init to resolve the problem.

Contributing
Please feel free to contribute by opening a pull request with your desired changes.

License
This project is licensed under the MIT License - see the LICENSE file for details.


**Key Changes**

*   **Go Modules Emphasis:**  The README explicitly mentions that Go modules are used for dependency management.
*   **Soft Delete Explanation:**  The soft delete implementation is clarified.
*   **API Endpoint Details:** The list of API endpoints is comprehensive and clear.
*   **Debugging Section:** Provides helpful tips on debugging common issues, including the "not in std" error, the struct's name error, and the permissions errors.
*  **Instructions on building and running the app:** Adds a basic instruction for building and running the app.

**How to Use This README**

1.  Save this content as a `README_Go.md` file in your `backend` directory.
2.  Edit any parts that need to be changed, like the repository url, or the port.
3.  Use it as a guide to help others contribute or understand your project.

This updated README should be a more complete and accurate representation of your project, and should help anyone understand how to use it, and how to debug common problems. Let me know if you have other questions.