{"ast":null,"code":"var _jsxFileName = \"/home/matteo/ElectronicKanban/KanbanApp/GoPostgreSql/frontend/src/components/FornitoreDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Heading, Button, useToast, Flex } from '@chakra-ui/react';\nimport axios from '../utils/axiosConfig';\nimport { useParams } from 'react-router-dom';\nimport KanbanCard from './KanbanCard';\nimport QrScanner from 'react-qr-scanner';\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FornitoreDashboard = () => {\n  _s();\n  const {\n    fornitoreId\n  } = useParams();\n  const [kanbanList, setKanbanList] = useState([]);\n  const toast = useToast();\n  const [groupedKanban, setGroupedKanban] = useState({});\n  const [scanning, setScanning] = useState(false);\n  const [scanResult, setScanResult] = useState('');\n  const {\n    t\n  } = useTranslation();\n  useEffect(() => {\n    const fetchKanban = async () => {\n      try {\n        const response = await axios.get(`/api/dashboard/fornitori/${fornitoreId}`);\n        setKanbanList(response.data);\n      } catch (error) {\n        toast({\n          title: 'Errore durante il caricamento dei dati',\n          description: 'Si è verificato un errore durante il caricamento dei kanban del fornitore.',\n          status: 'error',\n          duration: 5000,\n          isClosable: true\n        });\n      }\n    };\n    fetchKanban();\n  }, [fornitoreId, toast]);\n  useEffect(() => {\n    // Raggruppa i cartellini per codice prodotto e riordina\n    const grouped = kanbanList.reduce((acc, kanban) => {\n      var _kanban$prodotto;\n      const prodottoCodice = (_kanban$prodotto = kanban.prodotto) === null || _kanban$prodotto === void 0 ? void 0 : _kanban$prodotto.descrizione;\n      if (!acc[prodottoCodice]) {\n        acc[prodottoCodice] = [];\n      }\n      acc[prodottoCodice].push(kanban);\n      return acc;\n    }, {});\n\n    // Ordina i cartellini di ogni gruppo, mettendo prima quelli svuotati\n    for (const prodottoCodice in grouped) {\n      grouped[prodottoCodice].sort((a, b) => {\n        if (a.stato === 'Svuotato' && b.stato !== 'Svuotato') {\n          return -1;\n        } else if (a.stato !== 'Svuotato' && b.stato === 'Svuotato') {\n          return 1;\n        }\n        return 0;\n      });\n    }\n    setGroupedKanban(grouped);\n  }, [kanbanList]);\n  const handleAttivaKanban = async kanbanId => {\n    try {\n      await axios.put(`/api/kanban/${kanbanId}/stato`, {\n        stato: 'Attivo'\n      });\n      setKanbanList(kanbanList.map(kanban => kanban.id === kanbanId ? {\n        ...kanban,\n        stato: 'Attivo'\n      } : kanban));\n      toast({\n        title: 'Kanban reso attivo',\n        status: 'success',\n        duration: 3000,\n        isClosable: true\n      });\n    } catch (error) {\n      toast({\n        title: 'Errore durante l\\'aggiornamento',\n        description: 'Si è verificato un errore durante l\\'attivazione del kanban.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true\n      });\n    }\n  };\n  const handleScan = result => {\n    if (result) {\n      setScanning(false);\n      setScanResult(result.text);\n      //Estraggo l'id del kanban\n      const idKanban = result.text.split(\":\")[1];\n      if (idKanban) {\n        handleAttivaKanban(parseInt(idKanban, 10));\n      }\n    }\n  };\n  const handleError = err => {\n    console.error(err);\n    toast({\n      title: 'Errore durante la scansione del QR code',\n      description: 'Si è verificato un errore durante la scansione del QR code.',\n      status: 'error',\n      duration: 5000,\n      isClosable: true\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    p: 4,\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      mb: 4,\n      children: \"Dashboard Fornitore\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => setScanning(!scanning),\n      colorScheme: \"teal\",\n      mb: 4,\n      children: scanning ? \"Chiudi Scanner\" : \"Apri Scanner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }, this), scanning && /*#__PURE__*/_jsxDEV(QrScanner, {\n      onError: handleError,\n      onScan: handleScan,\n      style: {\n        width: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }, this), Object.keys(groupedKanban).length === 0 ? /*#__PURE__*/_jsxDEV(Box, {\n      children: t('noKanbanFound')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }, this) : Object.keys(groupedKanban).map(prodottoCodice => /*#__PURE__*/_jsxDEV(Box, {\n      mb: 6,\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        size: \"md\",\n        mb: 2,\n        children: prodottoCodice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 30\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        wrap: \"wrap\",\n        children: groupedKanban[prodottoCodice].map(kanban => /*#__PURE__*/_jsxDEV(KanbanCard, {\n          kanban: kanban,\n          showQrCode: true,\n          children: kanban.stato === 'Svuotato' && /*#__PURE__*/_jsxDEV(Button, {\n            colorScheme: \"green\",\n            onClick: () => handleAttivaKanban(kanban.id),\n            children: t('activate')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 41\n          }, this)\n        }, kanban.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 37\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 29\n      }, this)]\n    }, prodottoCodice, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 26\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n};\n_s(FornitoreDashboard, \"h31VbWuBM+IAw2B6aPiP0V2yKcI=\", false, function () {\n  return [useParams, useToast, useTranslation];\n});\n_c = FornitoreDashboard;\nexport default FornitoreDashboard;\nvar _c;\n$RefreshReg$(_c, \"FornitoreDashboard\");","map":{"version":3,"names":["React","useState","useEffect","Box","Heading","Button","useToast","Flex","axios","useParams","KanbanCard","QrScanner","useTranslation","jsxDEV","_jsxDEV","FornitoreDashboard","_s","fornitoreId","kanbanList","setKanbanList","toast","groupedKanban","setGroupedKanban","scanning","setScanning","scanResult","setScanResult","t","fetchKanban","response","get","data","error","title","description","status","duration","isClosable","grouped","reduce","acc","kanban","_kanban$prodotto","prodottoCodice","prodotto","descrizione","push","sort","a","b","stato","handleAttivaKanban","kanbanId","put","map","id","handleScan","result","text","idKanban","split","parseInt","handleError","err","console","p","children","mb","fileName","_jsxFileName","lineNumber","columnNumber","onClick","colorScheme","onError","onScan","style","width","Object","keys","length","size","wrap","showQrCode","_c","$RefreshReg$"],"sources":["/home/matteo/ElectronicKanban/KanbanApp/GoPostgreSql/frontend/src/components/FornitoreDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Box,\n    Heading,\n    Button,\n    useToast,\n    Flex\n} from '@chakra-ui/react';\nimport axios from '../utils/axiosConfig';\nimport { useParams } from 'react-router-dom';\nimport KanbanCard from './KanbanCard';\nimport QrScanner from 'react-qr-scanner';\nimport { useTranslation } from 'react-i18next';\n\nconst FornitoreDashboard = () => {\n    const { fornitoreId } = useParams();\n    const [kanbanList, setKanbanList] = useState([]);\n    const toast = useToast();\n    const [groupedKanban, setGroupedKanban] = useState({});\n    const [scanning, setScanning] = useState(false);\n     const [scanResult, setScanResult] = useState('');\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        const fetchKanban = async () => {\n            try {\n                const response = await axios.get(`/api/dashboard/fornitori/${fornitoreId}`);\n                setKanbanList(response.data);\n            } catch (error) {\n              toast({\n               title: 'Errore durante il caricamento dei dati',\n                 description: 'Si è verificato un errore durante il caricamento dei kanban del fornitore.',\n                status: 'error',\n                 duration: 5000,\n                isClosable: true,\n               });\n            }\n        };\n\n        fetchKanban();\n    }, [fornitoreId, toast]);\n\n\n     useEffect(() => {\n        // Raggruppa i cartellini per codice prodotto e riordina\n        const grouped = kanbanList.reduce((acc, kanban) => {\n            const prodottoCodice = kanban.prodotto?.descrizione;\n            if (!acc[prodottoCodice]) {\n                acc[prodottoCodice] = [];\n            }\n            acc[prodottoCodice].push(kanban);\n            return acc;\n        }, {});\n\n        // Ordina i cartellini di ogni gruppo, mettendo prima quelli svuotati\n        for (const prodottoCodice in grouped) {\n            grouped[prodottoCodice].sort((a, b) => {\n                if (a.stato === 'Svuotato' && b.stato !== 'Svuotato') {\n                    return -1;\n                } else if (a.stato !== 'Svuotato' && b.stato === 'Svuotato') {\n                    return 1;\n                }\n                return 0;\n            });\n        }\n\n        setGroupedKanban(grouped);\n    }, [kanbanList]);\n\n\n    const handleAttivaKanban = async (kanbanId) => {\n        try {\n            await axios.put(`/api/kanban/${kanbanId}/stato`, { stato: 'Attivo' });\n            setKanbanList(kanbanList.map(kanban => kanban.id === kanbanId ? { ...kanban, stato: 'Attivo' } : kanban));\n            toast({\n               title: 'Kanban reso attivo',\n               status: 'success',\n               duration: 3000,\n               isClosable: true,\n            });\n        } catch (error) {\n            toast({\n                title: 'Errore durante l\\'aggiornamento',\n                description: 'Si è verificato un errore durante l\\'attivazione del kanban.',\n                status: 'error',\n                duration: 5000,\n                isClosable: true,\n            });\n        }\n    };\n      const handleScan = (result) => {\n        if (result) {\n           setScanning(false);\n           setScanResult(result.text);\n          //Estraggo l'id del kanban\n          const idKanban = result.text.split(\":\")[1]\n          if (idKanban) {\n               handleAttivaKanban(parseInt(idKanban,10));\n           }\n        }\n    };\n\n      const handleError = (err) => {\n        console.error(err);\n         toast({\n              title: 'Errore durante la scansione del QR code',\n               description: 'Si è verificato un errore durante la scansione del QR code.',\n              status: 'error',\n              duration: 5000,\n             isClosable: true,\n          });\n      };\n\n    return (\n        <Box p={4}>\n          <Heading mb={4}>Dashboard Fornitore</Heading>\n              <Button onClick={() => setScanning(!scanning)} colorScheme=\"teal\" mb={4}>\n                 {scanning ? \"Chiudi Scanner\" : \"Apri Scanner\"}\n              </Button>\n             {scanning &&\n                <QrScanner\n                   onError={handleError}\n                   onScan={handleScan}\n                    style={{ width: '100%' }}\n                />\n              }\n                {Object.keys(groupedKanban).length === 0 ? (\n                    <Box>{t('noKanbanFound')}</Box>\n                ) : (\n                    Object.keys(groupedKanban).map((prodottoCodice) => (\n                         <Box key={prodottoCodice} mb={6}>\n                             <Heading size=\"md\" mb={2}>{prodottoCodice}</Heading>\n                            <Flex wrap=\"wrap\" >\n                              {groupedKanban[prodottoCodice].map((kanban) => (\n                                    <KanbanCard key={kanban.id} kanban={kanban} showQrCode={true}>\n                                        {kanban.stato === 'Svuotato' &&\n                                        <Button colorScheme=\"green\" onClick={() => handleAttivaKanban(kanban.id)}>{t('activate')}</Button>\n                                        }\n                                    </KanbanCard>\n                                ))\n                              }\n                            </Flex>\n                         </Box>\n                      ))\n             )}\n        </Box>\n    );\n};\n\nexport default FornitoreDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}